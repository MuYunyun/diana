(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{708:function(n,e){n.exports='### _.debounce(function, wait, [immediate])\n\n函数防抖，用来限制事件的频繁触发。例如: 使用防抖来限制点击查询按钮调用查询 api 的次数。传参 immediate 为 true 时，会立即执行传入的函数，wait 毫秒内不再触发事件后才可以重新触发执行；传参 immediate 不传或为 false 时，wait 毫秒内不触发事件后，会触发传入函数的执行 [&#x24C8;](https://github.com/MuYunyun/diana/blob/master/src/common/function/debounce.ts "View in source")\n\n##### Arguments\n\n`function` *(fn)* 需执行防抖的函数\n\n`wait` *(number)* 防抖频率\n\n`immediate` *(boolean)* 是否立即执行\n\n&nbsp;&nbsp;\n\n##### Example\n\n```js\n// 浏览器中重绘使用防抖\nconst lazyLayout = _.debounce(calculateLayout, 300)\n$(window).resize(lazyLayout)\n\n// 结合装饰器使用防抖\nclass Demo {\n  @Debounce(2000, true)\n  submit() {\n    // 调用查询 api\n  }\n}\n```'}}]);